/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.sudplan.wupp;

import org.openide.util.WeakListeners;

import java.awt.EventQueue;

import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 * DOCUMENT ME!
 *
 * @author   jlauter
 * @version  $Revision$, $Date$
 */
public class SurfaceManipulationVisualPanelMetadataConfig extends javax.swing.JPanel {

    //~ Instance fields --------------------------------------------------------

    private final transient SurfaceManipulationWizardPanelMetadataConfig model;
    private final transient DocumentListener documentListenerForName;
    private final transient DocumentListener documentListenerForDescription;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblName;
    private javax.swing.JScrollPane spDescription;
    private javax.swing.JTextArea txaDescription;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form SurfaceManipulationVisualPanelMetadataConfig.
     *
     * @param   model  DOCUMENT ME!
     *
     * @throws  IllegalStateException  DOCUMENT ME!
     */
    public SurfaceManipulationVisualPanelMetadataConfig(final SurfaceManipulationWizardPanelMetadataConfig model) {
        this.model = model;
        if (this.model == null) {
            throw new IllegalStateException("model instance must not be null");
        }

        this.setName(org.openide.util.NbBundle.getMessage(
                SurfaceManipulationVisualPanelMetadataConfig.class,
                "SurfaceManipulationVisualPanelMetadataConfig.SurfaceManipulationVisualPanelMetadataConfig(SurfaceManipulationWizardPanelMetadataConfig).name"));

        initComponents();

        documentListenerForName = new DocumentListenerImpl(true);
        txtName.getDocument()
                .addDocumentListener(WeakListeners.document(documentListenerForName, txtName.getDocument()));
        documentListenerForDescription = new DocumentListenerImpl(false);
        txaDescription.getDocument()
                .addDocumentListener(WeakListeners.document(
                        documentListenerForDescription,
                        txaDescription.getDocument()));
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     */
    public void init() {
        final boolean isNew = model.getIsConfigNew();

        final String name = model.getName();
        final String desc = model.getDescription();

        txtName.setText(name);
        txaDescription.setText(desc);

        if (!isNew) {
            txtName.setEnabled(false);
            if (!model.isConfigLocked()) {
                txaDescription.setEnabled(true);
                EventQueue.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            txaDescription.requestFocus();
                        }
                    });
            } else {
                txaDescription.setEnabled(false);
            }
        } else {
            txtName.setEnabled(true);
            txaDescription.setEnabled(true);
            txtName.setSelectionStart(0);
            txtName.setSelectionEnd(txtName.getText().length());

            EventQueue.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        txtName.requestFocus();
                    }
                });
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblDescription = new javax.swing.JLabel();
        spDescription = new javax.swing.JScrollPane();
        txaDescription = new javax.swing.JTextArea();

        setLayout(new java.awt.GridBagLayout());

        lblName.setText(org.openide.util.NbBundle.getMessage(
                SurfaceManipulationVisualPanelMetadataConfig.class,
                "SurfaceManipulationVisualPanelMetadataConfig.lblName.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        add(lblName, gridBagConstraints);

        txtName.setText(org.openide.util.NbBundle.getMessage(
                SurfaceManipulationVisualPanelMetadataConfig.class,
                "SurfaceManipulationVisualPanelMetadataConfig.txtName.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        add(txtName, gridBagConstraints);

        lblDescription.setText(org.openide.util.NbBundle.getMessage(
                SurfaceManipulationVisualPanelMetadataConfig.class,
                "SurfaceManipulationVisualPanelMetadataConfig.lblDescription.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 6);
        add(lblDescription, gridBagConstraints);

        txaDescription.setColumns(20);
        txaDescription.setLineWrap(true);
        txaDescription.setRows(5);
        txaDescription.setWrapStyleWord(true);
        spDescription.setViewportView(txaDescription);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        add(spDescription, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class DocumentListenerImpl implements DocumentListener {

        //~ Instance fields ----------------------------------------------------

        private final boolean isName;

        //~ Constructors -------------------------------------------------------

        /**
         * Creates a new DocumentListenerImpl object.
         *
         * @param  isName  DOCUMENT ME!
         */
        public DocumentListenerImpl(final boolean isName) {
            this.isName = isName;
        }

        //~ Methods ------------------------------------------------------------

        @Override
        public void insertUpdate(final DocumentEvent de) {
            updateModel();
        }

        @Override
        public void removeUpdate(final DocumentEvent de) {
            updateModel();
        }

        @Override
        public void changedUpdate(final DocumentEvent de) {
            updateModel();
        }

        /**
         * DOCUMENT ME!
         */
        private void updateModel() {
            if (isName) {
                model.setName(txtName.getText());
            } else {
                model.setDescription(txaDescription.getText());
            }
        }
    }
}
