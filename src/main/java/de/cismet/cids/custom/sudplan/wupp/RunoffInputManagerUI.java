/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.sudplan.wupp;

import Sirius.navigator.ui.ComponentRegistry;

import org.apache.log4j.Logger;

import org.openide.util.NbBundle;
import org.openide.util.WeakListeners;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.io.IOException;

import de.cismet.cids.dynamics.CidsBean;

/**
 * DOCUMENT ME!
 *
 * @author   mscholl
 * @version  $Revision$, $Date$
 */
public class RunoffInputManagerUI extends javax.swing.JPanel {

    //~ Static fields/initializers ---------------------------------------------

    private static final transient Logger LOG = Logger.getLogger(RunoffInputManagerUI.class);

    //~ Instance fields --------------------------------------------------------

    private final transient RunoffInputManager model;

    private final transient OpenIOListener geoCfgL;
    private final transient OpenIOListener rainL;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXHyperlink hypCalculationModel;
    private org.jdesktop.swingx.JXHyperlink hypRainevent;
    private javax.swing.JLabel lblCalculationModel;
    private javax.swing.JLabel lblRainevent;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form RunoffInputManagerUI.
     *
     * @param  model  DOCUMENT ME!
     */
    public RunoffInputManagerUI(final RunoffInputManager model) {
        this.model = model;
        geoCfgL = new OpenIOListener(true);
        rainL = new OpenIOListener(false);

        initComponents();

        init();

        hypCalculationModel.addActionListener(WeakListeners.create(ActionListener.class, geoCfgL, hypCalculationModel));
        hypRainevent.addActionListener(WeakListeners.create(ActionListener.class, rainL, hypRainevent));
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     */
    private void init() {
        try {
            final RunoffInput io = model.getUR();
            final CidsBean geocpmBean = io.fetchGeocpmInput();
            final CidsBean raineventBean = io.fetchRainevent();

            hypCalculationModel.setText((String)geocpmBean.getProperty("name")); // NOI18N
            hypRainevent.setText((String)raineventBean.getProperty("name"));     // NOI18N
        } catch (final IOException ex) {
            hypCalculationModel.setText("ERROR: " + ex);                         // NOI18N
            hypRainevent.setText("ERROR: " + ex);                                // NOI18N
            LOG.error("cannot initialise runoff input manager ui", ex);          // NOI18N
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblCalculationModel = new javax.swing.JLabel();
        lblRainevent = new javax.swing.JLabel();
        hypCalculationModel = new org.jdesktop.swingx.JXHyperlink();
        hypRainevent = new org.jdesktop.swingx.JXHyperlink();

        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        lblCalculationModel.setText(NbBundle.getMessage(
                RunoffInputManagerUI.class,
                "RunoffInputManagerUI.lblCalculationModel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblCalculationModel, gridBagConstraints);

        lblRainevent.setText(NbBundle.getMessage(RunoffInputManagerUI.class, "RunoffInputManagerUI.lblRainevent.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblRainevent, gridBagConstraints);

        hypCalculationModel.setText(NbBundle.getMessage(
                RunoffInputManagerUI.class,
                "RunoffInputManagerUI.hypCalculationModel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(hypCalculationModel, gridBagConstraints);

        hypRainevent.setText(NbBundle.getMessage(RunoffInputManagerUI.class, "RunoffInputManagerUI.hypRainevent.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(hypRainevent, gridBagConstraints);
    }                                                                                                                    // </editor-fold>//GEN-END:initComponents

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class OpenIOListener implements ActionListener {

        //~ Instance fields ----------------------------------------------------

        private final boolean geocpm;

        //~ Constructors -------------------------------------------------------

        /**
         * Creates a new OpenIOListener object.
         *
         * @param  geocpm  DOCUMENT ME!
         */
        public OpenIOListener(final boolean geocpm) {
            this.geocpm = geocpm;
        }

        //~ Methods ------------------------------------------------------------

        @Override
        public void actionPerformed(final ActionEvent e) {
            try {
                final RunoffInput io = model.getUR();
                final CidsBean bean = geocpm
                    ? ((io.getDeltaInputId() < 0) ? io.fetchGeocpmInput() : io.fetchDeltaInput()) : io.fetchRainevent();

                ComponentRegistry.getRegistry().getDescriptionPane().gotoMetaObject(bean.getMetaObject(), null);
            } catch (final IOException ex) {
                LOG.warn("cannot open hyperlink", ex); // NOI18N
            }
        }
    }
}
