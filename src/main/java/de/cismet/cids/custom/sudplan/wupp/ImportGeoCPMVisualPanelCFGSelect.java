/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.sudplan.wupp;

import org.openide.util.NbBundle;
import org.openide.util.WeakListeners;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.io.File;

import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import de.cismet.cids.custom.sudplan.WizardInitialisationException;

/**
 * DOCUMENT ME!
 *
 * @author   mscholl
 * @version  $Revision$, $Date$
 */
public class ImportGeoCPMVisualPanelCFGSelect extends javax.swing.JPanel {

    //~ Instance fields --------------------------------------------------------

    private final transient ImportGeoCPMWizardPanelCFGSelect model;
    private final transient DocL geocpmDocL;
    private final transient DocL dynaDocL;
    private final transient ActionL geocpmActionL;
    private final transient ActionL dynaActionL;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDynaConfig;
    private javax.swing.JButton btnGeoCPMConfig;
    private javax.swing.JLabel lblDynaConfig;
    private javax.swing.JLabel lblGeoCPMConfig;
    private javax.swing.JPanel pnlFill;
    private javax.swing.JTextField txtDynaConfig;
    private javax.swing.JTextField txtGeoCPMConfig;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form ImportGeoCPMVisualPanelCFGSelect.
     *
     * @param   model  DOCUMENT ME!
     *
     * @throws  WizardInitialisationException  DOCUMENT ME!
     */
    public ImportGeoCPMVisualPanelCFGSelect(final ImportGeoCPMWizardPanelCFGSelect model)
            throws WizardInitialisationException {
        this.model = model;

        initComponents();

        setName(NbBundle.getMessage(
                ImportGeoCPMVisualPanelCFGSelect.class,
                "ImportGeoCPMVisualPanelCFGSelect.constructor(ImportGeoCPMWizardPanelCFGSelect).panelName")); // NOI18N

        geocpmDocL = new DocL(true);
        dynaDocL = new DocL(false);
        geocpmActionL = new ActionL(true);
        dynaActionL = new ActionL(false);

        txtGeoCPMConfig.getDocument()
                .addDocumentListener(WeakListeners.document(geocpmDocL, txtGeoCPMConfig.getDocument()));
        txtDynaConfig.getDocument().addDocumentListener(WeakListeners.document(dynaDocL, txtDynaConfig.getDocument()));
        btnGeoCPMConfig.addActionListener(WeakListeners.create(ActionListener.class, geocpmActionL, btnGeoCPMConfig));
        btnDynaConfig.addActionListener(WeakListeners.create(ActionListener.class, dynaActionL, btnDynaConfig));
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     */
    void init() {
        if (model.getGeocpmFile() == null) {
            txtGeoCPMConfig.setText(null);
        } else {
            txtGeoCPMConfig.setText(model.getGeocpmFile().getAbsolutePath());
        }
        if (model.getDynaFile() == null) {
            txtDynaConfig.setText(null);
        } else {
            txtDynaConfig.setText(model.getDynaFile().getAbsolutePath());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblGeoCPMConfig = new javax.swing.JLabel();
        txtGeoCPMConfig = new javax.swing.JTextField();
        btnGeoCPMConfig = new javax.swing.JButton();
        lblDynaConfig = new javax.swing.JLabel();
        txtDynaConfig = new javax.swing.JTextField();
        btnDynaConfig = new javax.swing.JButton();
        pnlFill = new javax.swing.JPanel();

        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        lblGeoCPMConfig.setText(NbBundle.getMessage(
                ImportGeoCPMVisualPanelCFGSelect.class,
                "ImportGeoCPMVisualPanelCFGSelect.lblGeoCPMConfig.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 5, 5, 5);
        add(lblGeoCPMConfig, gridBagConstraints);

        txtGeoCPMConfig.setText(NbBundle.getMessage(
                ImportGeoCPMVisualPanelCFGSelect.class,
                "ImportGeoCPMVisualPanelCFGSelect.txtGeoCPMConfig.text")); // NOI18N
        txtGeoCPMConfig.setMinimumSize(new java.awt.Dimension(150, 28));
        txtGeoCPMConfig.setPreferredSize(new java.awt.Dimension(150, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 5, 5, 5);
        add(txtGeoCPMConfig, gridBagConstraints);

        btnGeoCPMConfig.setText(NbBundle.getMessage(
                ImportGeoCPMVisualPanelCFGSelect.class,
                "ImportGeoCPMVisualPanelCFGSelect.btnGeoCPMConfig.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 5, 5, 5);
        add(btnGeoCPMConfig, gridBagConstraints);

        lblDynaConfig.setText(NbBundle.getMessage(
                ImportGeoCPMVisualPanelCFGSelect.class,
                "ImportGeoCPMVisualPanelCFGSelect.lblDynaConfig.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblDynaConfig, gridBagConstraints);

        txtDynaConfig.setText(NbBundle.getMessage(
                ImportGeoCPMVisualPanelCFGSelect.class,
                "ImportGeoCPMVisualPanelCFGSelect.txtDynaConfig.text")); // NOI18N
        txtDynaConfig.setMinimumSize(new java.awt.Dimension(150, 28));
        txtDynaConfig.setPreferredSize(new java.awt.Dimension(150, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(txtDynaConfig, gridBagConstraints);

        btnDynaConfig.setText(NbBundle.getMessage(
                ImportGeoCPMVisualPanelCFGSelect.class,
                "ImportGeoCPMVisualPanelCFGSelect.btnDynaConfig.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(btnDynaConfig, gridBagConstraints);

        pnlFill.setOpaque(false);

        final org.jdesktop.layout.GroupLayout pnlFillLayout = new org.jdesktop.layout.GroupLayout(pnlFill);
        pnlFill.setLayout(pnlFillLayout);
        pnlFillLayout.setHorizontalGroup(
            pnlFillLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0, 100, Short.MAX_VALUE));
        pnlFillLayout.setVerticalGroup(
            pnlFillLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0, 100, Short.MAX_VALUE));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weighty = 1.0;
        add(pnlFill, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class ActionL implements ActionListener {

        //~ Instance fields ----------------------------------------------------

        private final transient boolean geocpm;

        //~ Constructors -------------------------------------------------------

        /**
         * Creates a new ActionL object.
         *
         * @param  geocpm  DOCUMENT ME!
         */
        ActionL(final boolean geocpm) {
            this.geocpm = geocpm;
        }

        //~ Methods ------------------------------------------------------------

        @Override
        public void actionPerformed(final ActionEvent e) {
            final JFileChooser jfc = new JFileChooser();
            jfc.setFileSelectionMode(geocpm ? JFileChooser.FILES_ONLY : JFileChooser.DIRECTORIES_ONLY);
            jfc.setSelectedFile(geocpm ? new File(txtGeoCPMConfig.getText()) : new File(txtDynaConfig.getText()));
            final int answer = jfc.showOpenDialog(ImportGeoCPMVisualPanelCFGSelect.this);
            if (JFileChooser.APPROVE_OPTION == answer) {
                if (geocpm) {
                    txtGeoCPMConfig.setText(jfc.getSelectedFile().getAbsolutePath());
                } else {
                    txtDynaConfig.setText(jfc.getSelectedFile().getAbsolutePath());
                }
            }
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class DocL implements DocumentListener {

        //~ Instance fields ----------------------------------------------------

        private final transient boolean geocpm;

        //~ Constructors -------------------------------------------------------

        /**
         * Creates a new DocL object.
         *
         * @param  geocpm  DOCUMENT ME!
         */
        DocL(final boolean geocpm) {
            this.geocpm = geocpm;
        }

        //~ Methods ------------------------------------------------------------

        @Override
        public void insertUpdate(final DocumentEvent e) {
            changedUpdate(e);
        }

        @Override
        public void removeUpdate(final DocumentEvent e) {
            changedUpdate(e);
        }

        @Override
        public void changedUpdate(final DocumentEvent e) {
            if (geocpm) {
                final String text = txtGeoCPMConfig.getText();
                model.setGeocpmFile(text.isEmpty() ? null : new File(text));
            } else {
                final String text = txtDynaConfig.getText();
                model.setDynaFile(text.isEmpty() ? null : new File(text));
            }
        }
    }
}
