/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.sudplan.wupp.objecteditors;

import org.jdesktop.beansbinding.Converter;

import org.openide.util.NbBundle;

import java.math.BigDecimal;

import de.cismet.cids.custom.sudplan.AbstractCidsBeanRenderer;

import de.cismet.cids.editors.EditorClosedEvent;
import de.cismet.cids.editors.EditorSaveListener;

/**
 * DOCUMENT ME!
 *
 * @author   mscholl
 * @version  $Revision$, $Date$
 */
public class DeltaBreakingEdgeEditor extends AbstractCidsBeanRenderer implements EditorSaveListener {

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private final transient javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
    private final transient javax.swing.JScrollPane jScrollPane2 = new javax.swing.JScrollPane();
    private final transient javax.swing.JLabel lblCm1 = new javax.swing.JLabel();
    private final transient javax.swing.JLabel lblCm2 = new javax.swing.JLabel();
    private final transient javax.swing.JLabel lblDescription = new javax.swing.JLabel();
    private final transient javax.swing.JLabel lblName = new javax.swing.JLabel();
    private final transient javax.swing.JLabel lblOrigHeight = new javax.swing.JLabel();
    private final transient javax.swing.JLabel lblOrigHeightValue = new javax.swing.JLabel();
    private final transient javax.swing.JLabel lblType = new javax.swing.JLabel();
    private final transient javax.swing.JLabel lblTypeValue = new javax.swing.JLabel();
    private final transient javax.swing.JPanel pnlFillHorizontal = new javax.swing.JPanel();
    private final transient javax.swing.JPanel pnlFillVertical = new javax.swing.JPanel();
    private final transient javax.swing.JSlider sldHeight = new javax.swing.JSlider();
    private final transient javax.swing.JTextArea txaDescription = new javax.swing.JTextArea();
    private final transient javax.swing.JTextField txtName = new javax.swing.JTextField();
    private final transient javax.swing.JTextField txtNewHeight = new javax.swing.JTextField();
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form DeltaBreakingEdgeEditor.
     */
    public DeltaBreakingEdgeEditor() {
        this(true);
    }

    /**
     * Creates a new DeltaBreakingEdgeEditor object.
     *
     * @param  editable  DOCUMENT ME!
     */
    public DeltaBreakingEdgeEditor(final boolean editable) {
        initComponents();

        if (!editable) {
            this.remove(sldHeight);
        }
        this.txaDescription.setEditable(editable);
        this.txtName.setEditable(editable);
        this.txtNewHeight.setEditable(editable);
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        lblName.setText(NbBundle.getMessage(DeltaBreakingEdgeEditor.class, "DeltaBreakingEdgeEditor.lblName.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblName, gridBagConstraints);

        lblDescription.setText(NbBundle.getMessage(
                DeltaBreakingEdgeEditor.class,
                "DeltaBreakingEdgeEditor.lblDescription.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblDescription, gridBagConstraints);

        lblType.setText(NbBundle.getMessage(DeltaBreakingEdgeEditor.class, "DeltaBreakingEdgeEditor.lblType.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblType, gridBagConstraints);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.original_object.type}"),
                lblTypeValue,
                org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceNullValue("<not set>");
        binding.setSourceUnreadableValue("<unreadable>");
        binding.setConverter(new BETypeConverter());
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblTypeValue, gridBagConstraints);

        lblOrigHeight.setText(NbBundle.getMessage(
                DeltaBreakingEdgeEditor.class,
                "DeltaBreakingEdgeEditor.lblOrigHeight.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblOrigHeight, gridBagConstraints);

        lblOrigHeightValue.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblOrigHeightValue.setMaximumSize(new java.awt.Dimension(50, 16));
        lblOrigHeightValue.setMinimumSize(new java.awt.Dimension(50, 16));
        lblOrigHeightValue.setPreferredSize(new java.awt.Dimension(50, 16));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.original_object.height}"),
                lblOrigHeightValue,
                org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceNullValue("<not set>");
        binding.setSourceUnreadableValue("<unreadable>");
        binding.setConverter(new BEHeightConverter());
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 3);
        add(lblOrigHeightValue, gridBagConstraints);

        txaDescription.setColumns(20);
        txaDescription.setRows(5);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.description}"),
                txaDescription,
                org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("<unreadable>");
        bindingGroup.addBinding(binding);

        jScrollPane2.setViewportView(txaDescription);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jScrollPane2, gridBagConstraints);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.name}"),
                txtName,
                org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("<unreadable>");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(txtName, gridBagConstraints);

        jLabel1.setText(NbBundle.getMessage(DeltaBreakingEdgeEditor.class, "DeltaBreakingEdgeEditor.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 5);
        add(jLabel1, gridBagConstraints);

        txtNewHeight.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtNewHeight.setMaximumSize(new java.awt.Dimension(50, 28));
        txtNewHeight.setMinimumSize(new java.awt.Dimension(50, 28));
        txtNewHeight.setPreferredSize(new java.awt.Dimension(50, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.height}"),
                txtNewHeight,
                org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceNullValue("0");
        binding.setSourceUnreadableValue("<unreadable>");
        binding.setConverter(new BEHeightConverter());
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 0);
        add(txtNewHeight, gridBagConstraints);

        sldHeight.setMajorTickSpacing(20);
        sldHeight.setMaximum(500);
        sldHeight.setMinorTickSpacing(10);
        sldHeight.setPaintTicks(true);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                txtNewHeight,
                org.jdesktop.beansbinding.ELProperty.create("${text}"),
                sldHeight,
                org.jdesktop.beansbinding.BeanProperty.create("value"));
        binding.setConverter(new SLDConverter());
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 7);
        add(sldHeight, gridBagConstraints);

        lblCm1.setText(NbBundle.getMessage(DeltaBreakingEdgeEditor.class, "DeltaBreakingEdgeEditor.lblCm1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(lblCm1, gridBagConstraints);

        lblCm2.setText(NbBundle.getMessage(DeltaBreakingEdgeEditor.class, "DeltaBreakingEdgeEditor.lblCm2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(lblCm2, gridBagConstraints);

        pnlFillHorizontal.setOpaque(false);
        pnlFillHorizontal.setLayout(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        add(pnlFillHorizontal, gridBagConstraints);

        pnlFillVertical.setOpaque(false);
        pnlFillVertical.setLayout(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(pnlFillVertical, gridBagConstraints);

        bindingGroup.bind();
    } // </editor-fold>//GEN-END:initComponents

    @Override
    protected void init() {
        bindingGroup.unbind();

        if (cidsBean == null) {
            txtName.setText(null);
            txaDescription.setText(null);
            txtNewHeight.setText(null);
        } else {
            bindingGroup.bind();
        }
    }

    @Override
    public void editorClosed(final EditorClosedEvent event) {
        // noop
    }

    @Override
    public boolean prepareForSave() {
        // noop

        return true;
    }

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    public static final class BETypeConverter extends Converter<Integer, String> {

        //~ Methods ------------------------------------------------------------

        @Override
        public String convertForward(final Integer value) {
            if (value == 0) {
                return "Gehwegbruchkante";
            } else if (value == 1) {
                return "Häuserbruchkante";
            } else {
                throw new IllegalStateException("unknown breaking edge type"); // NOI18N
            }
        }

        @Override
        public Integer convertReverse(final String value) {
            throw new UnsupportedOperationException("Not supported yet.");
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    public static final class BEHeightConverter extends Converter<BigDecimal, String> {

        //~ Methods ------------------------------------------------------------

        @Override
        public String convertForward(final BigDecimal value) {
            return String.valueOf(value.multiply(new BigDecimal(100)).intValue());
        }

        @Override
        public BigDecimal convertReverse(final String value) {
            if ((value == null) || value.isEmpty()) {
                return new BigDecimal(0);
            } else {
                return new BigDecimal(value).divide(new BigDecimal(100));
            }
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private static final class SLDConverter extends Converter<String, Integer> {

        //~ Methods ------------------------------------------------------------

        @Override
        public Integer convertForward(final String value) {
            try {
                return Integer.parseInt(value);
            } catch (final NumberFormatException e) {
                return 0;
            }
        }

        @Override
        public String convertReverse(final Integer value) {
            return String.valueOf(value);
        }
    }
}
